import { z } from "zod";

const latLngArraySchema = z.array(z.number());

const metaAthleteSchema = z
  .object({
    id: z.number(),
  });

export const sportTypeSchema = z.union([
  z.literal("AlpineSki"),
  z.literal("BackcountrySki"),
  z.literal("Badminton"),
  z.literal("Canoeing"),
  z.literal("Crossfit"),
  z.literal("EBikeRide"),
  z.literal("Elliptical"),
  z.literal("EMountainBikeRide"),
  z.literal("Golf"),
  z.literal("GravelRide"),
  z.literal("Handcycle"),
  z.literal("HighIntensityIntervalTraining"),
  z.literal("Hike"),
  z.literal("IceSkate"),
  z.literal("InlineSkate"),
  z.literal("Kayaking"),
  z.literal("Kitesurf"),
  z.literal("MountainBikeRide"),
  z.literal("NordicSki"),
  z.literal("Pickleball"),
  z.literal("Pilates"),
  z.literal("Racquetball"),
  z.literal("Ride"),
  z.literal("RockClimbing"),
  z.literal("RollerSki"),
  z.literal("Rowing"),
  z.literal("Run"),
  z.literal("Sail"),
  z.literal("Skateboard"),
  z.literal("Snowboard"),
  z.literal("Snowshoe"),
  z.literal("Soccer"),
  z.literal("Squash"),
  z.literal("StairStepper"),
  z.literal("StandUpPaddling"),
  z.literal("Surfing"),
  z.literal("Swim"),
  z.literal("TableTennis"),
  z.literal("Tennis"),
  z.literal("TrailRun"),
  z.literal("Velomobile"),
  z.literal("VirtualRide"),
  z.literal("VirtualRow"),
  z.literal("VirtualRun"),
  z.literal("Walk"),
  z.literal("WeightTraining"),
  z.literal("Wheelchair"),
  z.literal("Windsurf"),
  z.literal("Workout"),
  z.literal("Yoga"),
]);

export const polylineMapSchema = z
  .object({
    id: z.string(),
    polyline: z.string().optional(),
    summary_polyline: z.string(),
  });

export const activitySummarySchema = z.object({
  id: z.number(),
  external_id: z.string(),
  upload_id: z.number(),
  athlete: metaAthleteSchema,
  name: z.string(),
  distance: z.number(),
  moving_time: z.number(),
  elapsed_time: z.number(),
  total_elevation_gain: z.number(),
  elev_high: z.number(),
  elev_low: z.number(),
  sport_type: sportTypeSchema,
  start_date: z.string(),
  start_date_local: z.string(),
  timezone: z.string(),
  start_latlng: latLngArraySchema,
  end_latlng: latLngArraySchema,
  achievement_count: z.number(),
  kudos_count: z.number(),
  comment_count: z.number(),
  athlete_count: z.number(),
  photo_count: z.number(),
  total_photo_count: z.number(),
  map: polylineMapSchema.optional(),
  trainer: z.boolean(),
  commute: z.boolean(),
  manual: z.boolean(),
  private: z.boolean(),
  flagged: z.boolean(),
  workout_type: z.number().nullish(),
  upload_id_str: z.string(),
  average_speed: z.number(),
  max_speed: z.number(),
  has_kudoed: z.boolean(),
  gear_id: z.string().nullish(),
  kilojoules: z.number().optional(),
  average_watts: z.number().optional(),
  device_watts: z.boolean().optional(),
  max_watts: z.number().optional(),
  weighted_average_watts: z.number().optional(),
});

const athleteSchema = z.object({
  id: z.number(),
  resource_state: z.number(),
});

const lapSchema = z.object({
  id: z.number(),
  resource_state: z.number(),
  name: z.string(),
  activity: z.object({
    id: z.number(),
    visibility: z.string(),
    resource_state: z.number(),
  }),
  athlete: athleteSchema,
  elapsed_time: z.number(),
  moving_time: z.number(),
  start_date: z.string(),
  start_date_local: z.string(),
  distance: z.number(),
  average_speed: z.number(),
  max_speed: z.number(),
  lap_index: z.number(),
  split: z.number(),
  start_index: z.number(),
  end_index: z.number(),
  total_elevation_gain: z.number(),
  device_watts: z.boolean(),
  average_heartrate: z.number(),
  max_heartrate: z.number(),
});

const photosSchema = z.object({
  primary: z.nullable(z.unknown()),
  count: z.number(),
});

const statsVisibilitySchema = z.object({
  type: z.string(),
  visibility: z.string(),
});

export const activitySchema = z.object({
  resource_state: z.number(),
  athlete: athleteSchema,
  name: z.string(),
  distance: z.number(),
  moving_time: z.number(),
  elapsed_time: z.number(),
  total_elevation_gain: z.number(),
  type: z.string(),
  sport_type: sportTypeSchema,
  id: z.number(),
  start_date: z.string(),
  start_date_local: z.string(),
  timezone: z.string(),
  utc_offset: z.number(),
  location_city: z.nullable(z.unknown()),
  location_state: z.nullable(z.unknown()),
  location_country: z.nullable(z.unknown()),
  achievement_count: z.number(),
  kudos_count: z.number(),
  comment_count: z.number(),
  athlete_count: z.number(),
  photo_count: z.number(),
  map: polylineMapSchema,
  trainer: z.boolean(),
  commute: z.boolean(),
  manual: z.boolean(),
  private: z.boolean(),
  visibility: z.string(),
  flagged: z.boolean(),
  gear_id: z.nullable(z.unknown()),
  start_latlng: latLngArraySchema,
  end_latlng: latLngArraySchema,
  average_speed: z.number(),
  max_speed: z.number(),
  has_heartrate: z.boolean(),
  average_heartrate: z.number(),
  max_heartrate: z.number(),
  heartrate_opt_out: z.boolean(),
  display_hide_heartrate_option: z.boolean(),
  elev_high: z.number(),
  elev_low: z.number(),
  upload_id: z.number(),
  upload_id_str: z.string(),
  external_id: z.string(),
  from_accepted_tag: z.boolean(),
  pr_count: z.number(),
  total_photo_count: z.number(),
  has_kudoed: z.boolean(),
  description: z.nullable(z.unknown()),
  calories: z.number(),
  perceived_exertion: z.nullable(z.unknown()),
  prefer_perceived_exertion: z.nullable(z.unknown()),
  segment_efforts: z.array(z.unknown()),
  laps: z.array(lapSchema),
  photos: photosSchema,
  stats_visibility: z.array(statsVisibilitySchema),
  hide_from_home: z.boolean(),
  device_name: z.string(),
  embed_token: z.string(),
  available_zones: z.array(z.unknown()),
});

export const getActivitiesResponseSchema = z.array(activitySummarySchema);

const totalsSchema = z.object({
  count: z.number(),
  distance: z.number(),
  moving_time: z.number(),
  elapsed_time: z.number(),
  elevation_gain: z.number(),
  achievement_count: z.number().nullish(),
});

export const statsSchema = z.object({
  biggest_ride_distance: z.number(),
  biggest_climb_elevation_gain: z.number(),
  recent_ride_totals: totalsSchema,
  all_ride_totals: totalsSchema,
  recent_run_totals: totalsSchema,
  all_run_totals: totalsSchema,
  recent_swim_totals: totalsSchema,
  all_swim_totals: totalsSchema,
  ytd_ride_totals: totalsSchema,
  ytd_run_totals: totalsSchema,
  ytd_swim_totals: totalsSchema,
});
